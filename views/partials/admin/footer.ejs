<div class="modal fade" id="cropModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="crop-container">
                    <img id="cropImage" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="cancelCrop">
                    Cancel
                </button>
                <button type="button" class="btn btn-primary" id="cropAndSave">
                    Crop & Save
                </button>
            </div>
        </div>
    </div>
</div>
<footer class="main-footer font-xs text-center py-3">
    <div>&copy;
        <script>document.write(new Date().getFullYear())</script> Kaizen Street. All rights reserved.
    </div>
</footer>
</main>

<script src="/assets2/js/vendors/jquery-3.6.0.min.js"></script>
<script src="/assets2/js/vendors/bootstrap.bundle.min.js"></script>
<script src="/assets/js/main.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js" integrity="sha512-..." crossorigin="anonymous"></script>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let cropper = null;
        let currentSlot = null;
        const croppedBlobs = {};

        window.triggerFile = i => {
            const input = document.getElementById(`fileInput${i}`);
            if (!input) return console.warn('file input not found for slot', i);
            input.click();
        };

        window.loadCropper = (e, i) => {
            currentSlot = i;
            const fileInput = e.target;
            const file = fileInput && fileInput.files && fileInput.files[0];
            if (!file) return;


            const isByType = file.type && file.type.startsWith('image/');
            const isByExt = /\.(jpe?g|png|gif|webp)$/i.test(file.name);
            if (!isByType && !isByExt) {
                try { fileInput.value = ''; } catch (err) { }

                const msg = 'Please select an image file (jpg, png, gif, webp).';
                if (typeof Swal !== 'undefined') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid file',
                        text: msg,
                        customClass: { popup: 'swal-responsive' }
                    });
                } else {
                    alert(msg);
                }
                return;
            }

            const imgEl = document.getElementById('cropImage');
            if (!imgEl) {
                console.error('cropImage element not found');
                return;
            }

            try {
                const url = URL.createObjectURL(file);
                imgEl.src = url;
            } catch (error) {
                console.error('Could not create object URL for image', error);
                return;
            }

            const modalEl = document.getElementById('cropModal');
            if (!modalEl) {
                console.error('cropModal element not found');
                return;
            }
            const bsModal = new bootstrap.Modal(modalEl);
            bsModal.show();

            modalEl.addEventListener('shown.bs.modal', () => {
                try {
                    if (cropper) cropper.destroy();
                    cropper = new Cropper(imgEl, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 1,
                    });
                } catch (err) {
                    console.error('Cropper init error', err);
                }
            }, { once: true });
        };

        const cancelEl = document.getElementById('cancelCrop');
        if (cancelEl) {
            cancelEl.addEventListener('click', () => {
                if (cropper) {
                    cropper.destroy();
                    cropper = null;
                }
            });
        }

        const saveEl = document.getElementById('cropAndSave');
        if (saveEl) {
            saveEl.addEventListener('click', () => {
                if (!cropper || currentSlot == null) return;

                cropper.getCroppedCanvas({ width: 800, height: 800 }).toBlob(blob => {
                    croppedBlobs[currentSlot] = blob;

                    const dataURL = URL.createObjectURL(blob);
                    const slot = document.getElementById(`slot-${currentSlot}`);
                    if (slot) {
                        const img = slot.querySelector('img');
                        if (img) img.src = dataURL;
                        const btn = slot.querySelector('button');
                        if (btn) btn.style.display = 'none';
                        slot.classList.add('has-image');
                    }

                    updateState();

                    const modal = document.getElementById('cropModal');
                    const bs = bootstrap.Modal.getInstance(modal);
                    if (bs) bs.hide();

                    try {
                        cropper.destroy();
                        cropper = null;
                    } catch (err) { }
                }, 'image/jpeg', 0.85);
            });
        }

        const submitBtn = document.getElementById('submitBtn');
        const productForm = document.querySelector('form');

        function updateState() {
            const allImages = [0, 1, 2].every(i => croppedBlobs.hasOwnProperty(i));

            const fields = ['productName', 'regularPrice', 'status', 'category'];
            const sizeFields = ['S', 'M', 'L', 'XL', 'XXL'].map(s => document.getElementById(`stock_${s}`));
            const oneSizeHasStock = sizeFields.some(input => parseInt(input.value) > 0);

            const allFields = fields.every(id =>
                document.getElementById(id).value.trim() !== ''
            );

            const ok = allImages && allFields && oneSizeHasStock;
            submitBtn.disabled = !ok;

            const imgErr = document.getElementById('img-error');
            if (imgErr) imgErr.style.display = allImages ? 'none' : 'block';
        }

        document.querySelectorAll('input, select, textarea').forEach(el => {
            el.addEventListener('input', updateState);
            el.addEventListener('change', updateState);
        });

        updateState();

        productForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (submitBtn.disabled) {
                console.warn('Form validation failed');
                return;
            }

            submitBtn.disabled = true;
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Uploading...';

            try {
                const formData = new FormData();

                formData.append('productName', document.getElementById('productName').value);
                formData.append('description', document.getElementById('description').value);
                formData.append('specifications', document.getElementById('specifications').value);
                formData.append('category', document.getElementById('category').value);
                formData.append('regularPrice', document.getElementById('regularPrice').value);
                formData.append('productOffer', document.getElementById('productOffer').value);
                formData.append('discountPrice', document.getElementById('discountPrice').value);
                formData.append('status', document.getElementById('status').value);

                ['S', 'M', 'L', 'XL', 'XXL'].forEach(size => {
                    formData.append(`stock_${size}`, document.getElementById(`stock_${size}`).value);
                });

                [0, 1, 2].forEach(i => {
                    if (croppedBlobs[i]) {
                        formData.append('images', croppedBlobs[i], `product-${i}.jpg`);
                    }
                });

                const response = await fetch('/admin/addProducts', {
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();

                if (data.success) {
                    await Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: data.message,
                        timer: 2000,
                        showConfirmButton: false,
                        customClass: { popup: 'swal-responsive' }
                    });

                    window.location.href = data.redirectUrl;
                } else {
                    throw new Error(data.message);
                }

            } catch (error) {
                console.error('Form submission error:', error);
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;

                Swal.fire({
                    icon: 'error',
                    title: 'Upload Failed',
                    text: error.message || 'Something went wrong. Please try again.',
                    confirmButtonColor: '#dc3545',
                    customClass: { popup: 'swal-responsive' }
                });
            }
        });
    });

    const regInput = document.getElementById('regularPrice');
    const offInput = document.getElementById('productOffer');
    const discHidden = document.getElementById('discountPrice');

    function recalc() {
        const base = parseFloat(regInput.value) || 0;
        const pct = parseFloat(offInput.value) || 0;
        const clamped = Math.min(Math.max(pct, 0), 100);
        const discounted = base * (1 - clamped / 100);
        discHidden.value = discounted.toFixed(2);
    }

    regInput.addEventListener('input', recalc);
    offInput.addEventListener('input', recalc);
    recalc();
</script>

</body>

</html>