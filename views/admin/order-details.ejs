<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes">
    <title>Order Details</title>
    <link rel="icon" type="image/svg+xml" href="/assets2/imgs/theme/kaizenicon.svg">
    <link href="/assets2/css/main.css" rel="stylesheet" type="text/css">
    <link href="/css/responsiveAdmin.css" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
    .item-action-buttons {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-top: 0.5rem;
    }
  
    .item-action-buttons .btn {
      width: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.12rem;
      text-decoration: none;
      white-space: nowrap;
      width: fit-content;
      font-size: 11px;
      padding: 5px 10px;
    }
  
    .return-actions {
      display: flex;
      gap: 0.5rem;
    }
  
    .return-actions .btn {
      flex: 1;
    }
  
    .item-pricing-info {
      margin-top: 0.5rem;
      padding: 0.5rem;
      background-color: #f8f9fa;
      border-radius: 4px;
      font-size: 0.9em;
    }
  
    .original-item-price {
      color: #999;
      text-decoration: line-through;
    }
  
    .paid-item-price {
      color: #28a745;
      font-weight: 600;
    }
  
    .item-price .price-breakdown .original-price {
      text-decoration: line-through;
      color: #999;
      font-size: 0.9em;
    }
  
    .item-price .price-breakdown .customer-paid {
      color: #28a745;
      font-weight: 600;
      font-size: 1.1em;
    }
  
    .discount-applied {
      color: #28a745;
      font-weight: 500;
    }
  
    .savings-highlight {
      text-align: center;
      color: #28a745;
      font-weight: 500;
      margin-top: 0.5rem;
      padding: 0.5rem;
      background-color: #f8f9fa;
      border-radius: 4px;
      border-left: 3px solid #6c63ff;
    }
  
    @media (max-width: 768px) {
      .item-pricing-info {
        font-size: 0.8em;
        padding: 0.4rem;
      }
  
      .return-actions {
        flex-direction: column;
        gap: 0.3rem;
      }
    }
  
    .item-status-info {
      margin-top: 8px;
      display: flex;
      flex-direction: column;
      gap: 4px;
    }
  
    .item-status-badge {
      font-size: 12px;
      padding: 4px 8px;
      border-radius: 4px;
      font-weight: 500;
      display: inline-block;
      width: fit-content;
    }
  
    .content-header-right {
      margin-top: 1.5rem;
      display: flex;
      justify-content: center;
    }
  
    .btn-update {
      background: linear-gradient(135deg, #6c63ff 0%, #8f94fb 100%);
      color: white;
      border: none;
      padding: 0.65rem 1.5rem;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s ease;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      text-decoration: none;
      white-space: nowrap;
      width: fit-content;
    }
  
    .btn-update:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(108, 99, 255, 0.3);
      color: white;
      text-decoration: none;
    }
  
    .btn-back {
      background: #007bff;
      color: white;
      text-decoration: none;
      padding: 0.3rem 0.8rem;
      border-radius: 25px;
      font-weight: 500;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      transition: all 0.3s ease;
      border: 2px solid #007bff;
      margin: auto;
      margin-top: 3rem;
    }
  
    .btn-back:hover {
      background: #0056b3;
      border-color: #0056b3;
      color: white;
      text-decoration: none;
    }
  
    .order-details-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-bottom: 2rem;
    }
  
    .order-summary-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
      overflow: hidden;
    }
  
    .card-header {
      background: linear-gradient(90deg, #6c63ff, #8f94fb);
      color: white;
      padding: 1.25rem;
      font-weight: 600;
      font-size: 1.1rem;
    }
  
    .card-body {
      padding: 1rem;
    }
  
    .info-row {
      display: flex;
      justify-content: space-between;
      padding: 0.55rem 0;
      border-bottom: 1px solid #f0f0f0;
    }
  
    .info-row:last-child {
      border-bottom: none;
    }
  
    .info-label {
      font-weight: 600;
      color: #6c7293;
    }
  
    .info-value {
      color: #253D4E;
      font-weight: 500;
    }
  
    .items-section {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }
  
    .item-card {
      background: white;
      border: 1px solid #f0f0f0;
      border-radius: 8px;
      padding: 1.25rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      transition: all 0.3s ease;
    }
  
    .item-card:hover {
      box-shadow: 0 4px 12px rgba(108, 99, 255, 0.15);
      border-color: #6c63ff;
    }
  
    .item-image {
      width: 70px;
      height: 70px;
      object-fit: cover;
      border-radius: 8px;
      border: 2px solid #f0f0f0;
    }
  
    .item-details {
      flex: 1;
    }
  
    .item-name {
      font-weight: 600;
      color: #253D4E;
      margin-bottom: 0.25rem;
      font-size: 1rem;
    }
  
    .item-specs {
      color: #7e7e7e;
      font-size: 0.875rem;
    }
  
    .item-actions {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 0.5rem;
    }
  
    .item-price {
      font-weight: 700;
      color: black;
      font-size: 1.1rem;
    }
  
    .return-badge,
    .return-requested,
    .return-accepted,
    .return-rejected {
      padding: 4px 8px;
      border-radius: 12px;
      font-size: 11px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      display: inline-block;
      margin-left: 1rem;
    }
  
    .return-requested {
      background-color: #fff3cd;
      color: #856404;
    }
  
    .return-accepted {
      background-color: #d4edda;
      color: #155724;
    }
  
    .return-rejected {
      background-color: #f8d7da;
      color: #721c24;
    }
  
    .return-badge {
      background-color: #e9ecef;
      color: #495057;
    }
  
    .status-badge {
      padding: 0.4rem 0.8rem;
      border-radius: 20px;
      font-weight: 600;
      font-size: 0.75rem;
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }
  
    .status-placed {
      background: #ffc107;
      color: #856404;
    }
  
    .status-processing {
      background: #17a2b8;
      color: white;
    }
  
    .status-shipped {
      background: #6f42c1;
      color: white;
    }
  
    .status-out-for-delivery {
      background: #fd7e14;
      color: white;
    }
  
    .status-delivered {
      background: #28a745;
      color: white;
    }
  
    .status-cancelled {
      background: #dc3545;
      color: white;
    }
  
    .price-breakdown {
      background: #f8f9ff;
      border-radius: 8px;
      padding: 0.9rem;
    }
  
    .price-row {
      display: flex;
      justify-content: space-between;
      padding: 0.1rem;
      color: #6c7293;
    }
  
    .total-row {
      border-top: 2px solid #6c63ff;
      padding-top: 1rem;
      margin-top: 1rem;
      font-size: 1.2rem;
      font-weight: 700;
      color: #253D4E;
    }
  
    .address-card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
      overflow: hidden;
      height: fit-content;
    }
  
    .address-content {
      padding: 1.5rem;
    }
  
    .address-content p {
      margin: 0.5rem 0;
      color: #6c7293;
      line-height: 1.6;
    }
  
    .customer-info {
      background: white;
      border-radius: 8px;
      padding: 1rem;
    }
  
    .customer-name {
      font-size: 1rem;
      font-weight: 600;
      color: #253D4E;
      margin-bottom: 0.5rem;
    }
  
    .customer-email {
      color: #6c7293;
      font-size: 0.9rem;
    }
  
    .action-buttons {
      display: flex;
      gap: 1rem;
      margin-top: 2rem;
      flex-wrap: wrap;
    }
  
    .btn-secondary {
      background: #6c7293;
      color: white;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 6px;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.3s ease;
    }
  
    .btn-secondary:hover {
      background: #5a5f7d;
    }
  
    @media (max-width: 768px) {
      .order-details-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }
  
      .item-card {
        flex-direction: column;
        text-align: center;
        gap: 1rem;
      }
  
      .item-actions {
        flex-direction: row;
        justify-content: center;
        width: 100%;
      }
  
      .info-row {
        flex-direction: column;
        gap: 0.25rem;
        text-align: center;
      }
  
      .action-buttons {
        flex-direction: column;
      }
  
      .card-body {
        padding: 1rem;
      }
    }
  
    .table-wrap {
      overflow-x: auto;
    }
  
    .pagination .page-link {
      color: #6c63ff;
      border-radius: 8px;
      border: 1px solid #6c63ff;
      margin: 0 4px;
      transition: 0.3s ease;
    }
  
    .pagination .page-link:hover {
      background-color: #6c63ff;
      color: white;
    }
  
    .pagination .page-item.active .page-link {
      background-color: #6c63ff;
      border-color: #6c63ff;
      color: white;
    }
  </style>

</head>

<body>
   <div class="screen-overlay" id="screenOverlay"></div>
  <aside class="navbar-aside" id="offcanvas_aside">
    <div class="aside-top">
      <a href="/admin" class="brand-wrap">
        <img src="/assets2/imgs/theme/kaizenlogoo.svg" class="logo" alt="Kaizen Dashboard">
      </a>
      <div>
        <button class="btn btn-icon btn-aside-minimize">
          <i class="text-muted material-icons md-menu_open"></i>
        </button>
      </div>
    </div>
    <nav>
      <ul class="menu-aside">
        <li class="menu-item">
          <a class="menu-link" href="/admin"> <i class="icon material-icons md-home"></i>
            <span class="text">Dashboard</span>
          </a>
        </li>
        <li class="menu-item">
          <a class="menu-link" href="/admin/user"> <i class="icon material-icons md-person"></i>
            <span class="text">Customers</span>
          </a>
        </li>
        <li class="menu-item">
          <a class="menu-link" href="/admin/category"> <i class="icon material-icons md-store"></i>
            <span class="text">Category</span>
          </a>
        </li>
        <li class="menu-item has-submenu">
          <a class="menu-link"><i class="icon material-icons md-shopping_bag"></i>
            <span class="text">Products</span>
          </a>
          <div class="submenu">
            <a href="/admin/addProducts">Product Add</a>
            <a href="/admin/products">Product List</a>
          </div>
        </li>
        <li class="menu-item active">
          <a class="menu-link" href="/admin/orders">
            <i class="icon material-icons md-shopping_cart"></i>
            <span class="text">Orders</span>
          </a>
        </li>
        <li class="menu-item">
          <a class="menu-link" href="/admin/transactions">
            <i class="icon material-icons md-account_balance_wallet"></i>
            <span class="text">Transactions</span>
          </a>
        </li>
        <li class="menu-item ">
          <a class="menu-link" href="/admin/coupons">
            <i class="icon material-icons md-local_offer"></i>
            <span class="text">Coupons</span>
          </a>
        </li>
         <li class="menu-item">
          <a class="menu-link" href="/admin/sales-report">
            <i class="icon material-icons md-assessment"></i>
            <span class="text">Sales Report</span>
          </a>
          </li>
      </ul>
    </nav>
  </aside>

  <main class="main-wrap">
    <% const _msg=typeof message !=='undefined' ? message : '' ; %>
  
      <header class="main-header navbar">
        <button class="mobile-menu-btn" id="mobileMenuBtn">
          <i class="fas fa-bars"></i>
        </button>
        <div class="col-search"></div>
      </header>
     
      <div class="logout-fixed">
        <ul class="nav">
          <li class="dropdown nav-item">
            <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownAccount">
              <img class="img-xs rounded-circle" src="/assets2/imgs/theme/adminAvatar.svg" alt="Admin">
            </a>
            <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownAccount">
              <a class="dropdown-item text-danger" href="/admin/logout">
                <i class="material-icons md-exit_to_app"></i>Logout
              </a>
            </div>
          </li>
        </ul>
      </div>
  
      <section class="content-main">
        <div class="content-header d-flex justify-content-between align-items-center mb-4">
          <div>
            <h2 class="content-title card-title">Order Details</h2>
          </div>
        </div>

        <% if (_msg) { %>
          <div class="alert alert-warning mb-4">
            <%= _msg %>
          </div>
          <% } %>

            <% if (order) { %>

              <div class="order-details-grid">
                <div class="left-column">
                  <div class="order-summary-card">
                    <div class="card-header">
                      <i class="material-icons" style="vertical-align: middle; margin-right: 0.5rem;"></i>
                      Order Items
                    </div>
                    <div class="card-body">
                      <div class="items-section">
                        <% if (order.items && order.items.length> 0) { %>
                          <% order.items.forEach((item, index)=> { %>
                            <% const itemStatus=item.status || order.status; const
                              itemStatusLower=itemStatus.toLowerCase(); const orderDiscount=order.discount || 0; %>
                              <div class="item-card">
                                <img src="<%= item.image || '/imgs/placeholder.jpg' %>" alt="<%= item.name %>"
                                  class="item-image" onerror="this.src='/imgs/placeholder.jpg'">

                                <div class="item-details">
                                  <div class="item-name">
                                    <%= item.name %>
                                  </div>
                                  <div class="item-specs">
                                    Qty: <%= item.quantity %> | Size: <%= item.size || 'Standard' %> | Unit Price: ₹<%=
                                          item.price %>
                                  </div>

                                  <% if (orderDiscount> 0) { %>
                                    <div class="item-pricing-info">
                                      <div class="original-item-price">Original: ₹<%= item.itemOriginalSubtotal %>
                                      </div>
                                      <div class="paid-item-price">Customer Paid: ₹<%= item.itemActualPaid %>
                                      </div>
                                    </div>
                                    <% } %>

                                      <div class="item-status-info">
                                        <div class="status-badges-inline">
                                          <span
                                            class="item-status-badge status-<%= itemStatusLower.replace(/\s+/g, '-') %>">
                                            <%= itemStatus %>
                                          </span>

                                          <% if (item.returnRequest && item.returnRequest.status) { %>
                                            <% const rs=String(item.returnRequest.status).toLowerCase(); %>
                                              <% if (rs==='requested' ) { %>
                                                <span class="return-requested return-<%= rs %>">
                                                  Return Requested
                                                </span>
                                                <% } else if (rs==='refunded' ) { %>
                                                  <span class="return-accepted return-<%= rs %>">
                                                    Refunded
                                                  </span>
                                                  <% } else if (rs==='rejected' ) { %>
                                                    <span class="return-rejected return-<%= rs %>">
                                                      Rejected
                                                    </span>
                                                    <% } %>
                                                      <% } %>
                                        </div>

                                        <div class="status-details">
                                          <% if (item.returnRequest && item.returnRequest.reason) { %>
                                            <small class="return-reason">Reason: <%= item.returnRequest.reason %>
                                                </small>
                                            <% } %>

                                              <% if (item.returnRequest && item.returnRequest.adminNote) { %>
                                                <small class="admin-note">Admin Note: <%= item.returnRequest.adminNote
                                                    %></small>
                                                <% } %>

                                                  <% if (itemStatusLower==='cancelled' && item.cancellationReason) { %>
                                                    <small class="cancellation-reason">
                                                      Reason: <%= item.cancellationReason %>
                                                    </small>
                                                    <% } %>
                                        </div>
                                      </div>
                                </div>

                                <div class="item-actions">


                                  <div class="item-action-buttons">
                                    <% if (item.returnRequest && item.returnRequest.status==='requested' ) { %>
                                      <div class="return-actions">
                                        <button class="btn btn-sm btn-success"
                                          onclick="handleReturnRequest('<%= order._id %>', '<%= item._id %>', 'approve')">
                                          Approve
                                        </button>
                                        <button class="btn btn-sm btn-danger"
                                          onclick="handleReturnRequest('<%= order._id %>', '<%= item._id %>', 'reject')">
                                          Reject
                                        </button>
                                      </div>
                                      <% } %>
                                       <% if (itemStatusLower !== 'cancelled' && itemStatusLower !== 'delivered' && (!item.returnRequest || item.returnRequest.status !== 'requested')) { %>
            <button class="btn btn-sm btn-primary" onclick="updateItemStatus('<%= order._id %>', '<%= item._id %>', '<%= itemStatus %>')">
                <i class="material-icons md-edit" ></i>Update Status</button>
        <% } %>           
                                  </div>
                                </div>
                              </div>
                              <% }); %>
                                <% } else { %>
                                  <p class="text-center text-muted">No items found in this order.</p>
                                  <% } %>
                      </div>

                      <div class="customer-info">
                        <div class="customer-name">
                          <strong>Name:</strong>
                          <%= order.user?.name || 'Customer' %>
                        </div>
                        <div class="customer-email">
                          <%= order.user?.email || 'No email provided' %>
                        </div>

                        <div class="card-body">
                          <div class="info-row">
                            <span class="info-label">Order ID:</span>
                            <span class="info-value">#<%=
                                order.displayOrderId||order._id.toString().slice(-8).toUpperCase() %></span>
                          </div>
                          <div class="info-row">
                            <span class="info-label">Order Date:</span>
                            <span class="info-value">
                              <% if (order.placedAt || order.createdAt) { %>
                                <%= new Date(order.placedAt || order.createdAt).toLocaleString('en-US', {
                                  weekday: 'short' , year: 'numeric' , month: 'short' , day: '2-digit' , hour: '2-digit'
                                  , minute: '2-digit' }) %>
                                  <% } else { %>
                                    Recently
                                    <% } %>
                            </span>
                          </div>

                          <div class="info-row">
                            <span class="info-label">Payment Method:</span>
                            <span class="info-value">
                              <%= order.paymentMethod || 'Card' %>
                            </span>
                          </div>
                          <div class="info-row">
                            <span class="info-label">Total Items:</span>
                            <span class="info-value">
                              <%= order.items?.length || 0 %>
                            </span>
                          </div>
                          <div class="info-row">
                            <span class="info-value">
                              <span class="status-wrapper">
                                <% const items=order.items || []; const statusSummary={}; items.forEach(item=> {
                                  const status = item.status || order.status;
                                  statusSummary[status] = (statusSummary[status] || 0) + 1;
                                  });
                                  const hasMultipleStatuses = Object.keys(statusSummary).length > 1;
                                  %>
                              </span>
                            </span>
                          </div>
                        </div>
                      </div>

                      <div class="price-breakdown">
                        <% const orderDiscount=order.discount || 0; %>
                          <div class="price-row">
                            <span>Subtotal:</span>
                            <span>₹<%= order.originalTotal || (order.items && order.items.length> 0 ?
                                order.items.reduce((sum, item) => sum + (item.subtotal || (item.price * item.quantity)),
                                0) : 0) %></span>
                          </div>
                          <div class="price-row">
                            <span>Shipping Charges:</span>
                            <span>₹<%= order.shippingCost || 0 %></span>
                          </div>
                          <div class="price-row discount-applied">
                            <span>Discount Applied:</span>
                            <span>-₹<%= orderDiscount %></span>
                          </div>
                          <div class="price-row total-row">
                            <span><strong>Customer Paid:</strong></span>
                            <span><strong>₹<%= order.actualAmountPaid || order.totalAmount || 0 %></strong></span>
                          </div>
                          <% if (orderDiscount> 0) { %>
                            <div class="savings-highlight">
                              <small>Customer saved ₹<%= orderDiscount %> with coupon!</small>
                            </div>
                            <% } %>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="right-column">
                  <div class="address-card">
                    <div class="card-header">
                      <i class="material-icons" style="vertical-align: middle; margin-right: 0.5rem;"></i>
                      Shipping Address
                    </div>
                    <div class="address-content">
                      <% const a=order.address; %>
                        <% if (a) { %>
                          <p><strong>
                              <%= a.userName || 'Customer' %>
                            </strong></p>
                          <p>
                            <%= a.houseNo || '' %>, <%= a.locality || '' %>
                          </p>
                          <p>
                            <%= a.city %> - <%= a.pincode %>
                          </p>
                          <% if (a.phoneNumber) { %>
                            <p><strong>Phone:</strong> +91 <%= a.phoneNumber %>
                            </p>
                            <% } %>
                              <% } else { %>
                                <p>Address details not available</p>
                                <% } %>
                    </div>
                  </div>

              <div class="content-header-right">
                <% const orderItems=order.items || []; const allItemStatuses=orderItems.map(item=> item.status || order.status);
                  const uniqueItemStatuses = [...new Set(allItemStatuses)];
                  const allItemsSameStatus = uniqueItemStatuses.length === 1;
                  const allItemsDelivered = allItemStatuses.every(s => s === 'Delivered');
                  const allItemsCancelled = allItemStatuses.every(s => s === 'Cancelled');
              
                  const disableOverallUpdate = !allItemsSameStatus || allItemsDelivered || allItemsCancelled;
                  %>
              
                  <% if (disableOverallUpdate) { %>
                    <button class="btn btn-update" disabled style="opacity: 0.5; cursor: not-allowed;"
                      title="<%= allItemsDelivered ? 'All items delivered' : allItemsCancelled ? 'All items cancelled' : 'Items have different statuses. Update individually.' %>">
                      <i class="material-icons md-edit"></i>
                      Update Overall Status
                    </button>
                    <% } else { %>
                      <button class="btn btn-update" onclick="updateOrderStatus()">
                        <i class="material-icons md-edit"></i>
                        Update Overall Status
                      </button>
                      <% } %>
              </div>

                  <div class="d-flex align-items-center">
                    <a href="/admin/orders" class="btn-back">
                      <i class="material-icons md-arrow_back"></i>
                      Back to Orders
                    </a>
                  </div>
                </div>
              </div>

              <% } else { %>
                <div class="card mb-4">
                  <div class="card-body text-center py-5">
                    <i class="material-icons"
                      style="font-size: 4rem; color: #dc3545; margin-bottom: 1rem;">error_outline</i>
                    <h3 class="mb-3">Order Not Found</h3>
                    <p class="text-muted mb-4">The order you're looking for doesn't exist or has been removed.</p>
                    <a href="/admin/orders" class="btn btn-add">
                      <i class="material-icons md-arrow_back"></i>
                      Back to Orders
                    </a>
                  </div>
                </div>
                <% } %>
      </section>


      <footer class="main-footer font-xs text-center py-3">
        <div>&copy;
          <script>
            document.write(new Date().getFullYear())
          </script> Kaizen Street. All rights reserved.
        </div>
      </footer>
  </main>

    <script src="/assets2/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="/assets2/js/vendors/bootstrap.bundle.min.js"></script>
    <script src="/assets2/js/vendors/select2.min.js"></script>
    <script src="/assets2/js/vendors/perfect-scrollbar.js"></script>
    <script src="/assets2/js/vendors/jquery.fullscreen.min.js"></script>
    <script src="/assets2/js/main.js" type="text/javascript"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <script>
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const sidebar = document.getElementById('offcanvas_aside');
    const overlay = document.getElementById('screenOverlay');

    if (mobileMenuBtn) {
      mobileMenuBtn.addEventListener('click', function (e) {
        e.preventDefault();
        sidebar.classList.toggle('show');
        overlay.classList.toggle('show');
      });
    }
    
    if (overlay) {
      overlay.addEventListener('click', function () {
        sidebar.classList.remove('show');
        overlay.classList.remove('show');
      });
    }
   
    document.querySelectorAll('.menu-link').forEach(link => {
      link.addEventListener('click', function () {
        sidebar.classList.remove('show');
        overlay.classList.remove('show');
      });
    });
  </script>
  
  <script>

    async function updateItemStatus(orderId, itemId, currentStatus) {
      if (!orderId || !itemId) {
        return Swal.fire('Error', 'Missing order or item information', 'error');
      }

      const statusOptions = {
        'Placed': 'Order Placed',
        'Processing': 'Processing',
        'Shipped': 'Shipped',
        'Out for Delivery': 'Out for Delivery',
        'Delivered': 'Delivered'
      };

      delete statusOptions['Cancelled'];

      const { value: selected } = await Swal.fire({
        title: 'Update Item Status',
        input: 'select',
        inputOptions: statusOptions,
        inputValue: currentStatus,
        showCancelButton: true,
        confirmButtonText: 'Update Status',
        confirmButtonColor: '#6c63ff',
        inputValidator: (value) => !value && 'You need to select a status!'
      });

      if (!selected) return;

      Swal.fire({
        title: 'Updating...',
        text: 'Please wait...',
        allowOutsideClick: false,
        showConfirmButton: false,
        didOpen: () => Swal.showLoading()
      });

      try {
        const resp = await fetch(`/admin/orders/${orderId}/items/${itemId}/status`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status: selected })
        });

        let body;
        try {
          body = await resp.json();
        } catch (e) {
          throw new Error('Invalid server response');
        }

        if (!resp.ok) {
          throw new Error(body?.message || `HTTP ${resp.status}`);
        }

        await Swal.fire({
          title: 'Success!',
          text: body.message || 'Item status updated successfully',
          icon: 'success',
          confirmButtonColor: '#6c63ff'
        });

        location.reload();

      } catch (err) {
        console.error('Item status update error:', err);
        Swal.fire({
          title: 'Error',
          text: err.message || 'Failed to update item status',
          icon: 'error'
        });
      }
    }

    async function handleReturnRequest(orderId, itemId, action) {

      if (!orderId || !itemId) {
        Swal.fire('Error', 'Missing order or item information', 'error');
        return;
      }

      const actionText = action === 'approve' ? 'approve' : 'reject';
      const confirmResult = await Swal.fire({
        title: `Confirm ${actionText}`,
        text: `Are you sure you want to ${actionText} this return request?`,
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: `Yes, ${actionText}`,
        cancelButtonText: 'Cancel',
        confirmButtonColor: action === 'approve' ? '#28a745' : '#dc3545',
        cancelButtonColor: '#6c757d'
      });

      if (!confirmResult.isConfirmed) {
        return;
      }

      Swal.fire({
        title: 'Processing...',
        text: 'Please wait while we update the return status.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      try {

        const resp = await fetch(`/admin/returns/${orderId}/${itemId}`, {
          method: 'PATCH',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action: action,
            adminNote: ''
          })
        });

        const responseText = await resp.text();

        let data;
        try {
          data = JSON.parse(responseText);
        } catch (parseError) {
          console.error('Failed to parse response as JSON:', parseError);
          throw new Error(`Server returned invalid response: ${responseText}`);
        }

        if (!resp.ok) {
          const errorMessage = data?.message || `HTTP ${resp.status}: ${resp.statusText}`;
          throw new Error(errorMessage);
        }

        Swal.fire({
          title: 'Success!',
          text: data.message || `Return request ${action}d successfully.`,
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          location.reload();
        });

      } catch (err) {
        console.error('Error in handleReturnRequest:', err);

        Swal.fire({
          title: 'Error',
          text: err.message || 'Failed to update return status',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }

    function updateStatusUI(newStatus) {
      const badge = document.getElementById('order-status-badge') || document.querySelector('.info-value .status-badge');

      if (!badge) return;

      const safe = (s) => String(s).toLowerCase().replace(/\s+/g, '-');

      badge.className = badge.className
        .split(/\s+/)
        .filter(c => !c.startsWith('status-'))
        .join(' ');

      badge.classList.add('status-' + safe(newStatus));
      badge.textContent = newStatus;
    }

    async function updateOrderStatus() {
      const currentStatus = '<%= order ? order.status : "Placed" %>';
      const orderId = '<%= order ? order._id : "" %>';

      if (!orderId) {
        return Swal.fire('Error', 'Order ID not found', 'error');
      }

      const statusOptions = {
        'Placed': 'Order Placed',
        'Processing': 'Processing',
        'Shipped': 'Shipped',
        'Out for Delivery': 'Out for Delivery',
        'Delivered': 'Delivered'
      };

      const { value: selected } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: statusOptions,
        inputValue: currentStatus,
        showCancelButton: true,
        confirmButtonText: 'Update Status',
        confirmButtonColor: '#6c63ff',
        inputValidator: (value) => !value && 'You need to select a status!'
      });

      if (!selected) return;

      Swal.fire({
        title: 'Updating...',
        allowOutsideClick: false,
        didOpen: () => Swal.showLoading()
      });

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      try {
        const resp = await fetch(`/admin/orders/${orderId}/status`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ status: selected }),
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        let body = null;
        try {
          body = await resp.json();
        } catch (e) {
          body = null;
        }

        if (!resp.ok) {
          const msg = body?.message || body?.error || `HTTP ${resp.status}`;
          throw new Error(msg);
        }

        updateStatusUI(selected);

        await Swal.fire({
          title: 'Success',
          text: body.message || 'Order status updated successfully',
          icon: 'success',
          confirmButtonColor: '#6c63ff'
        });

        location.reload();

      } catch (err) {
        const message = err.name === 'AbortError'
          ? 'Request timed out'
          : (err.message || 'Something went wrong');

        console.error('Status update error:', err);

        await Swal.fire({
          title: 'Error',
          text: message,
          icon: 'error',
          confirmButtonColor: '#dc3545'
        });
      } finally {
        try {
          Swal.close();
        } catch (e) { }
      }
    }

    (function setupPolling() {
      if (!('<%= order ? order._id : "" %>')) return;
      const orderId = '<%= order._id %>';
      let lastStatus = '<%= order.status %>';
      const pollIntervalMs = 30000;
      let pollTimer = null;

      async function poll() {
        try {
          const res = await fetch(`/admin/orders/${orderId}/status`);
          if (!res.ok) return;
          const json = await res.json().catch(() => null);
          if (!json || !json.status) return;
          if (json.status !== lastStatus) {
            lastStatus = json.status;
            updateStatusUI(lastStatus);
          }
        } catch (e) { }
      }

      pollTimer = setInterval(poll, pollIntervalMs);

      window.addEventListener('beforeunload', () => {
        if (pollTimer) clearInterval(pollTimer);
      });

      setTimeout(poll, 2000);
    })();

    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.return-info').forEach(icon => {
        icon.addEventListener('click', async () => {
          const orderId = icon.getAttribute('data-order-id');
          const itemId = icon.getAttribute('data-item-id');
          const productName = icon.getAttribute('data-product') || 'Unknown Product';
          const reason = icon.getAttribute('data-reason') || 'No reason provided';

          if (!orderId || !itemId) {
            Swal.fire('Error', 'Missing order or item information', 'error');
            return;
          }

          const result = await Swal.fire({
            title: 'Return Request',
            html: `
          <p><strong>Product:</strong> ${productName}</p>
          <p><strong>Reason:</strong> ${reason}</p>
          <p style="color: #666; font-size: 0.9em;">Order ID: ${orderId}</p>
          <p style="color: #666; font-size: 0.9em;">Item ID: ${itemId}</p>`,
            icon: 'info',
            showCancelButton: true,
            confirmButtonText: 'Approve',
            cancelButtonText: 'Reject',
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#dc3545',
            reverseButtons: true
          });

          if (result.isConfirmed) {
            await handleReturnDecision(orderId, itemId, 'accepted');
          } else if (result.dismiss === Swal.DismissReason.cancel) {
            await handleReturnDecision(orderId, itemId, 'rejected');
          }
        });
      });
    });

    async function handleReturnDecision(orderId, itemId, action) {
      Swal.fire({
        title: 'Processing...',
        text: 'Please wait while we update the return status.',
        allowOutsideClick: false,
        allowEscapeKey: false,
        showConfirmButton: false,
        didOpen: () => {
          Swal.showLoading();
        }
      });

      try {

        const resp = await fetch(`/admin/returns/${orderId}/${itemId}`, {
          method: 'PATCH',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            action,
            adminNote: ''
          })
        });

        const responseText = await resp.text();

        let data;
        try {
          data = JSON.parse(responseText);
        } catch (parseError) {
          console.error('Failed to parse response as JSON:', parseError);
          throw new Error(`Server returned invalid response: ${responseText}`);
        }

        if (!resp.ok) {
          const errorMessage = data?.message || `HTTP ${resp.status}: ${resp.statusText}`;
          throw new Error(errorMessage);
        }

        Swal.fire({
          title: 'Success!',
          text: data.message || `Return request ${action} successfully.`,
          icon: 'success',
          confirmButtonText: 'OK'
        }).then(() => {
          location.reload();
        });

      } catch (err) {
        console.error('Error in handleReturnDecision:', err);

        Swal.fire({
          title: 'Error',
          text: err.message || 'Failed to update return status',
          icon: 'error',
          confirmButtonText: 'OK'
        });
      }
    }
  </script>


</body>

</html>